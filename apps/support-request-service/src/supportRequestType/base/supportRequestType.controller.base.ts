/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupportRequestTypeService } from "../supportRequestType.service";
import { SupportRequestTypeCreateInput } from "./SupportRequestTypeCreateInput";
import { SupportRequestType } from "./SupportRequestType";
import { SupportRequestTypeFindManyArgs } from "./SupportRequestTypeFindManyArgs";
import { SupportRequestTypeWhereUniqueInput } from "./SupportRequestTypeWhereUniqueInput";
import { SupportRequestTypeUpdateInput } from "./SupportRequestTypeUpdateInput";

export class SupportRequestTypeControllerBase {
  constructor(protected readonly service: SupportRequestTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupportRequestType })
  async createSupportRequestType(
    @common.Body() data: SupportRequestTypeCreateInput
  ): Promise<SupportRequestType> {
    return await this.service.createSupportRequestType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SupportRequestType] })
  @ApiNestedQuery(SupportRequestTypeFindManyArgs)
  async supportRequestTypes(
    @common.Req() request: Request
  ): Promise<SupportRequestType[]> {
    const args = plainToClass(SupportRequestTypeFindManyArgs, request.query);
    return this.service.supportRequestTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupportRequestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supportRequestType(
    @common.Param() params: SupportRequestTypeWhereUniqueInput
  ): Promise<SupportRequestType | null> {
    const result = await this.service.supportRequestType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupportRequestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupportRequestType(
    @common.Param() params: SupportRequestTypeWhereUniqueInput,
    @common.Body() data: SupportRequestTypeUpdateInput
  ): Promise<SupportRequestType | null> {
    try {
      return await this.service.updateSupportRequestType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupportRequestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupportRequestType(
    @common.Param() params: SupportRequestTypeWhereUniqueInput
  ): Promise<SupportRequestType | null> {
    try {
      return await this.service.deleteSupportRequestType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
