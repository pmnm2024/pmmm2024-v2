/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupportRequestDetailService } from "../supportRequestDetail.service";
import { SupportRequestDetailCreateInput } from "./SupportRequestDetailCreateInput";
import { SupportRequestDetail } from "./SupportRequestDetail";
import { SupportRequestDetailFindManyArgs } from "./SupportRequestDetailFindManyArgs";
import { SupportRequestDetailWhereUniqueInput } from "./SupportRequestDetailWhereUniqueInput";
import { SupportRequestDetailUpdateInput } from "./SupportRequestDetailUpdateInput";

export class SupportRequestDetailControllerBase {
  constructor(protected readonly service: SupportRequestDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupportRequestDetail })
  async createSupportRequestDetail(
    @common.Body() data: SupportRequestDetailCreateInput
  ): Promise<SupportRequestDetail> {
    return await this.service.createSupportRequestDetail({
      data: data,
      select: {
        createdAt: true,
        id: true,
        quantity: true,
        supportRequestID: true,
        unit: true,
        updatedAt: true,
        wareHouseId: true,
        wareHouseName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SupportRequestDetail] })
  @ApiNestedQuery(SupportRequestDetailFindManyArgs)
  async supportRequestDetails(
    @common.Req() request: Request
  ): Promise<SupportRequestDetail[]> {
    const args = plainToClass(SupportRequestDetailFindManyArgs, request.query);
    return this.service.supportRequestDetails({
      ...args,
      select: {
        createdAt: true,
        id: true,
        quantity: true,
        supportRequestID: true,
        unit: true,
        updatedAt: true,
        wareHouseId: true,
        wareHouseName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupportRequestDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supportRequestDetail(
    @common.Param() params: SupportRequestDetailWhereUniqueInput
  ): Promise<SupportRequestDetail | null> {
    const result = await this.service.supportRequestDetail({
      where: params,
      select: {
        createdAt: true,
        id: true,
        quantity: true,
        supportRequestID: true,
        unit: true,
        updatedAt: true,
        wareHouseId: true,
        wareHouseName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupportRequestDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupportRequestDetail(
    @common.Param() params: SupportRequestDetailWhereUniqueInput,
    @common.Body() data: SupportRequestDetailUpdateInput
  ): Promise<SupportRequestDetail | null> {
    try {
      return await this.service.updateSupportRequestDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          quantity: true,
          supportRequestID: true,
          unit: true,
          updatedAt: true,
          wareHouseId: true,
          wareHouseName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupportRequestDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupportRequestDetail(
    @common.Param() params: SupportRequestDetailWhereUniqueInput
  ): Promise<SupportRequestDetail | null> {
    try {
      return await this.service.deleteSupportRequestDetail({
        where: params,
        select: {
          createdAt: true,
          id: true,
          quantity: true,
          supportRequestID: true,
          unit: true,
          updatedAt: true,
          wareHouseId: true,
          wareHouseName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
